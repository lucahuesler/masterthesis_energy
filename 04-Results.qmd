# Results {#results}

```{r}
#| label: load-libs
#| include: false

library(tidyverse)
library(tidymodels)
```

## Preprocessing {#preprocessing}

```{r}
#| label: load-data
#| include: false

#> energy statistics data
energy_raw <- read_delim("data/hslu_grunddaten_energiestatistik_20221026.csv", delim = ";", show_col_types = FALSE)

#> RBD data
gwr_building <-  read_delim("data/gwr_gebaeude_20221027.csv", delim = ";", show_col_types = FALSE)
gwr_building_heights <-  read_delim("data/gwr_building_heights.csv", delim = ";", show_col_types = FALSE)
gwr_dwelling <- read_delim("data/gwr_wohnung_20221027.csv", delim = ";", show_col_types = FALSE)

#> retrofit data
retrofit_m01 <- read_delim("data/sanierungen_typ_M01.csv", delim = ",", show_col_types = FALSE)
retrofit_bl01 <- read_delim("data/sanierungen_typ_BL01.csv", delim = ",", show_col_types = FALSE)
retrofit_bl20 <- read_delim("data/sanierungen_typ_BL20.csv", delim = ",", show_col_types = FALSE)
retrofit_ea <- read_delim("data/sanierungen_typ_EA.csv", delim = ",", show_col_types = FALSE)
retrofit_ec <- read_delim("data/sanierungen_typ_EC.csv", delim = ",", show_col_types = FALSE)
retrofit_geb <- read_delim("data/sanierungen_typ_GEB.csv", delim = ",", show_col_types = FALSE)
retrofit_ezb <- read_delim("data/sanierungen_typ_EZB.csv", delim = ",", show_col_types = FALSE)
```


In order to prepare the data for modelling, we apply the following filters:

-   Only residential buildings (`gkat = 1020`)
-   Only buildings with a measured gas consumption of more than 1 MWh (exclude buildings that use gas only for cooking)
-   Only buildings with a HEPI \> $20 \ kWh/m²$
- Only buildings where the gas is used for HEC or for DWH+HEC. As this information is absent for many buildings, we also include `NA` values here.

```{r}
#| label: filter-data
#| include: false

#> Filter to relevant buildings for modelling

energy_clean <- energy_raw %>%
  left_join(gwr_building_heights, by = "egid", suffix = c("_energy", "_gwr")) %>%
  filter(verbrauch_erhoben_mwh > 1,
         gkat == 1020,
         energienutzung_anlage %in% c("Raumwärme", "Raumwärme + Warmwasser", NA)
         )
```


```{r}
#| label: rename-retrofit-data
#| include: false


dfs_to_translate <- list(retrofit_bl01, retrofit_bl20, retrofit_ea, retrofit_ec, retrofit_ezb, retrofit_geb, retrofit_m01)

colnames_to_translate <- sapply(dfs_to_translate, colnames) %>%
  unlist() %>%
  unique()

colnames_to_translate = colnames_to_translate[!duplicated(colnames_to_translate)]

translated_cols <- c(
      admin_id = "Administration\nGesuch-ID",
      admin_project_type = "Administration\nProjekttyp",
      admin_project_name = "Administration\nProjektname",
      applicant_name = "Gesuchsteller\nVor- & Nachname",
      property_address = "Liegenschaft\nAdresse",
      admin_status = "Administration\nStatus",
      param_windows = "Projekt- und Massnahmedaten (Eingabeparameter)\nA Fenster",
      param_roof = "Projekt- und Massnahmedaten (Eingabeparameter)\nB1 Dach",
      param_wall_exterior = "Projekt- und Massnahmedaten (Eingabeparameter)\nB2 Wand gegen aussen (Fassade)",
      param_floor_exterior = "Projekt- und Massnahmedaten (Eingabeparameter)\nB3 Boden gegen aussen (Untersicht)",
      param_wall_underground = "Projekt- und Massnahmedaten (Eingabeparameter)\nB4 Wand im Erdreich (bis 2m)",
      param_floor_underground = "Projekt- und Massnahmedaten (Eingabeparameter)\nB5 Boden im Erdreich (bis 2m)",
      param_wall_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC1 Wand gegen unbeheizt",
      param_ceiling_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC2 Decke gegen unbeheizt (Estrichboden)",
      param_floor_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC3 Boden gegen unbeheizt (Kellerdecke)",
      param_wall_subsurface_deep = "Projekt- und Massnahmedaten (Eingabeparameter)\nC4 Wand im Erdreich (mehr als 2m im Erdreich)",
      param_floor_subsurface_deep = "Projekt- und Massnahmedaten (Eingabeparameter)\nC5 Boden im Erdreich (mehr als 2m im Erdreich)",
      param_construction_start = "Projekt- und Massnahmedaten (Eingabeparameter)\nBaubeginn",
      param_construction_completion = "Projekt- und Massnahmedaten (Eingabeparameter)\nBaufertigstellung",
      param_new_heated_rooms = "Projekt- und Massnahmedaten (Eingabeparameter)\nWerden bestehende Räume neu beheizt?\t",
      param_investment_costs = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvestitionskosten in CHF",
      param_geak_plus_analysis = "Projekt- und Massnahmedaten (Eingabeparameter)\nGEAK Plus / Grobanalyse vorhanden?",
      param_heating_post_renovation = "Projekt- und Massnahmedaten (Eingabeparameter)\nWärmeerzeugung nach der Sanierung",
      param_heating_pre_renovation = "Projekt- und Massnahmedaten (Eingabeparameter)\nWärmeerzeugung vor der Sanierung",
      param_additions_planned = "Projekt- und Massnahmedaten (Eingabeparameter)\nSind Anbauten, Aufbauten oder eine Aufstockung projektiert?",
      "property_street" = "Liegenschaft\nStrasse",
      "property_number" = "Liegenschaft\nNr.",
      "property_zip" = "Liegenschaft\nPLZ",
      "property_city" = "Liegenschaft\nOrt",
      "property_political_municipality" = "Liegenschaft\nPolitische Gemeinde",
      "property_national_building_identifier" = "Liegenschaft\neidgenössischer Gebäudeidentifikator",
      "property_parcel_number" = "Liegenschaft\nParzellen-Nr.",
      "param_project_code" = "Projekt- und Massnahmedaten (Eingabeparameter)\nProjektcode",
      "param_geak" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGEAK",
      "param_costs" = "Projekt- und Massnahmedaten (Eingabeparameter)\nKosten",
      "param_heating_pre_renovation" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizung vor Sanierung",
      "param_primary_heating_system" = "Projekt- und Massnahmedaten (Eingabeparameter)\nPrim. Heizsystem",
      "param_heat_savings" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEinsparung Wärme",
      "param_hot_water" = "Projekt- und Massnahmedaten (Eingabeparameter)\nBrauchwarmwasser",
      "param_heating_demand_heating_degree" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizwärmebedarf Hg",
      "param_heating_demand_quartely" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizwärmebedarf Qh",
      "param_renewable_heat_production" = "Projekt- und Massnahmedaten (Eingabeparameter)\nErneuerbare Wärmeprod.",
      "param_nonrenewable_heat_production" = "Projekt- und Massnahmedaten (Eingabeparameter)\nNicht erneuerbare Wärmeprod.",
      "param_building_type" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGebäude-Typ",
      "param_residential_buildings" = "Projekt- und Massnahmedaten (Eingabeparameter)\nWohnbauten",
      "param_insulation_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Dämmung",
      "param_heating_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Heizung",
      "param_ventilation_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Lüftung",
      "param_hot_water_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Warmwasser",
      "param_type" = "Projekt- und Massnahmedaten (Eingabeparameter)\nArt",
      "param_energy_reference_area" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEnergiebezugsfläche",
      "param_completion" = "Projekt- und Massnahmedaten (Eingabeparameter)\nFertigstellung",
      "param_new_heated_rooms" = "Projekt- und Massnahmedaten (Eingabeparameter)\nRäume neu beheizt",
      "param_overall_renovation_standard" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGesamtsan.-Standard",
      "param_window_facade_roof" = "Projekt- und Massnahmedaten (Eingabeparameter)\nA1 Fenster mit Fassade/Dach",
      "param_wall_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB2 Wand gegen aussen",
      "param_ceiling_unheated" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC2 Decke gegen unbeheizt",
      "param_floor_unheated" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC3 Boden gegen unbeheizt",
      "param_wall_subsurface_deep" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC4 Wand im Erdreich (> 2m)",
      "param_floor_subsurface_deep" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC5 Boden im Erdreich (> 2m)",
      "admin_payment_year" = "Administration\nAuszahlungs-Jahr",
      "param_additions_planned" = "Projekt- und Massnahmedaten (Eingabeparameter)\nAnbau oder Aufstockung geplant",
      "param_overall_renovation_standard" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGesamtsan.-Standard",
      "param_analysis_exists" = "Projekt- und Massnahmedaten (Eingabeparameter)\nAnalyse bereits vorhanden",
      "param_energy_analysis_with_geak" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEnergieanalyse mit GEAK?",
      "param_costs_energy_analysis" = "Projekt- und Massnahmedaten (Eingabeparameter)\nKosten (gemäss Offerte für Energieanalyse)",
      "param_geak_plus_analysis_exists" = "Projekt- und Massnahmedaten (Eingabeparameter)\nLiegt der GEAK Plus oder die Gebäudeanalyse mit Vorgehensempfehlung bereits vor? Ja/Nein",
      "param_windows_no_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nA2 Fenster ohne Fassade/Dach",
    "param_floor_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB3 Boden gegen aussen",
    "param_wall_underground" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB4 Wand im Erdreich (< 2m)",
    "param_floor_underground" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB5 Boden im Erdreich (< 2m)"
      
)



translate_colnames <- function(df) {
  df <- df %>%
    rename(any_of(translated_cols))
}

translate_colnames <- function(df) {
  object_name <- deparse(substitute(df))
  df_clean <- df %>%
    rename(any_of(translated_cols))
  assign(paste0(object_name, "_clean"), df_clean, envir = .GlobalEnv)
}


translate_colnames(retrofit_bl01)
translate_colnames(retrofit_bl20)
translate_colnames(retrofit_ea)
translate_colnames(retrofit_ec)
translate_colnames(retrofit_ezb)
translate_colnames(retrofit_geb)
translate_colnames(retrofit_m01)

#> check translated names in new dfs

dfs_translated <- list(retrofit_bl01_clean, retrofit_bl20_clean, retrofit_ea_clean, retrofit_ec_clean, retrofit_ezb_clean, retrofit_geb_clean, retrofit_m01_clean)

colnames_translated <- sapply(dfs_translated, colnames) %>%
  unlist() %>%
  unique()


```


```{r}
#| label: conversion-kwh 
#| include: false

#> convert kwh to mwh everywhere

energy_clean <- energy_clean %>%
  mutate(produktion_soko_mwh = if_else(!is.na(produktion_soko_kwh),produktion_soko_kwh/1000,0),
         verbrauch_warmwasser_mwh = verbrauch_warmwasser_kwh/1000)
```


```{r}
#| label: clean-data-types
#| include: false

#> Set datatypes explicitly

energy_clean <- energy_clean %>%
  mutate_at(vars(erhebungsjahr, genh1_energy, genw1_energy, wirkungsgrad_anlage, energienutzung_anlage, ggdenr, gbaup, gbaum, gksce, gwaerzh1, genh1_gwr, gwaersceh1, gwaerzw1, genw1_gwr, genw1_gwr, gwaerscew1, k_gsknu, k_gskqu, k_gska, k_gphvoqu, k_idwv, k_wvhz, gkat, gklas, gstat, gvolnorm, gvolsce), factor) %>%
  mutate_at(vars(egid, anzahl_bewohner, baujahr_anlage, gbauj, gabbj, gastw, gazzi, k_ganzwhg, k_egid_hz), as.integer) %>%
  mutate_at(vars(verbrauch_erhoben_mwh, verbrauch_geschaetzt_mwh, heizkoeffizient_erhoben, heizkoeffizient_geschaetzt, bruttogeschossflaeche, produktion_soko_kwh, k_gskfl, k_gphvokw, garea, gvol, gebf, meters_above_sealevel, produktion_soko_mwh, verbrauch_warmwasser_mwh), as.double) %>%
  mutate_at(vars(k_gsoko, k_gphvo), as.logical) %>%
  mutate_at(vars(gbez), as.character) %>%
  mutate_at(vars(gwaerdath1, gwaerdatw1), as.Date)
```

```{r}
#| label: rename-columns
#| include: false

#> rename columns to english

df <- df %>%
  rename(
    id = egid,
    survey_year = erhebungsjahr,
    energy_source_heat_1 = genh1_energy,
    energy_source_water_1 = genw1_energy,
    energy_consumed_measured_mwh = verbrauch_erhoben_mwh,
    energy_consumed_estimated_mwh = verbrauch_geschaetzt_mwh,
    num_residents = anzahl_bewohner,
    heating_coefficient_measured = heizkoeffizient_erhoben,
    heating_coefficient_estimated = heizkoeffizient_geschaetzt,
    gross_floor_area = bruttogeschossflaeche,
    year_of_installation = baujahr_anlage,
    efficiency_of_installation = wirkungsgrad_anlage,
    energy_usage_of_installation = energienutzung_anlage,
    energy_consumed_hot_water_kwh = verbrauch_warmwasser_kwh,
    energy_production_solar = produktion_soko_kwh,
    solar_system = k_gsoko,
    solar_system_area_m2 = k_gskfl,
    k_gska = k_gska,
    solar_system_usage = k_gsknu,
    solar_system_source = k_gskqu,
    photovoltaic_system = k_gphvo,
    photovoltaic_system_power_kw = k_gphvokw,
    photovoltaic_system_source = k_gphvoqu,
    district_heating_id = k_idwv,
    district_heating_role = k_wvhz,
    heated_by_egid = k_egid_hz,
    house_number = gebnr,
    municipality_code = ggdenr,
    building_name = gbez,
    building_category = gkat,
    building_class = gklas,
    building_status = gstat,
    construction_year = gbauj,
    construction_type = gbaup,
    construction_month = gbaum,
    demolition_year = gabbj,
    building_area_m2 = garea,
    building_volume_m3 = gvol,
    building_volume_norm = gvolnorm,
    building_volume_source = gvolsce,
    energy_reference_area = gebf,
    coordinate_e = gkode,
    coordinate_n = gkodn,
    coordinate_system_source = gksce,
    num_floors = gastw,
    num_separate_living_space = gazzi,
    num_dwellings = k_ganzwhg,
    energy_heat_1_gwr = gwaerzh1,
    energy_heat_1_gwr = genh1_gwr,
    energy_heat_1_date = gwaerdath1,
    energy_heat_1_source = gwaersceh1,
    energy_water_1_year = gwaerzw1)
```


To calculate the HEC for each building, we use the @eq-hec introduced in Chapter @sec-problem-definition. Based on the HEC, we can also calculate HEPI.

```{r}
energy_clean_model <- energy_clean %>%
  mutate(hec = (verbrauch_erhoben_mwh*wirkungsgrad_anlage)+(produktion_soko_mwh) - (verbrauch_warmwasser_mwh),
         hepi = hec/bruttogeschossflaeche) %>%
  filter(hec > 0)
  


sum(energy_clean$hec, na.rm = T)
sum(energy_clean$verbrauch_erhoben_mwh, na.rm = T)

hec_check <- energy_clean %>%
  select(egid, verbrauch_erhoben_mwh, energienutzung_anlage, hec,wirkungsgrad_anlage ,produktion_soko_mwh, verbrauch_warmwasser_mwh, verbrauch_geschaetzt_mwh, heizkoeffizient_erhoben, heizkoeffizient_geschaetzt)
```


```{r}
#| label: summary-stats
#| include: false

#> Filter to relevant buildings for modelling

summary_table <- energy_clean %>%
  group_by(ggdenr, energienutzung_anlage) %>%
  summarise(n = n()) %>%
  pivot_wider(names_from = ggdenr,
              values_from = n)

summary_table
```

## Exploratory Analysis {#exploratory-analysis}

```{r histogram, echo = FALSE}
hist_plot <- energy_clean %>%
  ggplot(aes(x = verbrauch_erhoben_mwh)) +
  geom_histogram(bins = 50, col= "white") 

hist_plot
```

As the histogram is right-skewed (a few houses with a high energy use), it makes sense to log-transform.

```{r histogram-log, echo = FALSE}
hist_plot_log <- hist_plot +
  scale_x_log10()

hist_plot_log
```

```{r}
correlations <- energy_clean %>%
  select(where(is.numeric)) %>%
  correlations()
```

```{r}
energy_clean_log <- energy_clean %>%
  mutate(verbrauch_erhoben_mwh_log = log(verbrauch_erhoben_mwh))
```

## Per community

```{r}
community_plot <- energy_clean %>%
  ggplot(aes(x = meters_above_sealevel, y = verbrauch_erhoben_mwh)) +
  geom_point() +
  facet_grid(rows = vars(ggdenr))

community_plot
```

## Modelling

Train/test split

```{r}

#> Set the random number stream using `set.seed()` so that the results can be 
#> reproduced later. 
set.seed(501)

#> Save the split information for an 80/20 split of the data
energy_split <- initial_split(energy_clean_log, prop = 0.80, strata = verbrauch_erhoben_mwh)
energy_split


#> Creating train and test set
energy_train <- training(energy_split)
energy_test  <-  testing(energy_split)

dim(energy_train)

#> Resampling train set
set.seed(123)
folds <- vfold_cv(energy_train, v = 5, strata = verbrauch_erhoben_mwh)
folds
```

### Multiple linear regression

```{r}

lm_model <- 
  linear_reg() %>% 
  set_engine("lm")

lm_form_fit <- 
  lm_model %>% 
  fit(verbrauch_erhoben_mwh_log ~ bruttogeschossflaeche + gkode + gkodn + erhebungsjahr, data = energy_clean_log)

lm_form_fit


```

```{r}
tidy(lm_form_fit)
```

```{r}
prediction <- predict(lm_form_fit, energy_test)

test_res <- bind_cols(prediction, energy_test %>% select(egid, gbez, verbrauch_erhoben_mwh_log))
```

```{r}
ggplot(test_res, aes(x = verbrauch_erhoben_mwh_log, y = .pred)) + 
  #> Create a diagonal line:
  geom_abline(lty = 2) + 
  geom_point(alpha = 0.5) + 
  labs(y = "Predicted Energy use (log10)", x = "Measured energy use (log10)") +
  #> Scale and size the x- and y-axis uniformly:
  coord_obs_pred()
```

```{r}
ggplot(energy_clean, aes(x = log(verbrauch_erhoben_mwh), y = log(verbrauch_geschaetzt_mwh))) + 
  #> Create a diagonal line:
  geom_abline(lty = 2) + 
  geom_point(alpha = 0.5) + 
  labs(y = "Predicted Energy use (log10)", x = "Measured energy use (log10)") +
  #> Scale and size the x- and y-axis uniformly:
  coord_obs_pred()
```
