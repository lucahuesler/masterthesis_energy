# Preprocessing {#sec-preprocessing}

## Loading libraries {#sec-loading-libraries}

```{r}
#| label: load-libs
#| include: false

if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, tidymodels, skimr, plotly, sf, agua, nngeo)

source("helpers/helper_functions.R")
```

## Loading data {#sec-loading-data}

```{r}
#| label: load-data
#| include: false

#> energy statistics data
energy_raw <- read_delim("data/hslu_grunddaten_energiestatistik_20230125.csv", delim = ";", show_col_types = FALSE)


#> GWR data
gwr_building <-  read_delim("data/gwr_gebaeude_20221027.csv", delim = ";", show_col_types = FALSE)
gwr_building_heights <-  read_delim("data/gwr_building_heights.csv", delim = ";", show_col_types = FALSE)
gwr_dwelling <- read_delim("data/gwr_wohnung_20221027.csv", delim = ";", show_col_types = FALSE)
gwr_entrance <- read_delim("data/gwr_eingang_20230109.csv", delim = "\t", show_col_types = FALSE)
gwr_building_statpop <- read_delim("data/gwr_gebaeude_statpop.csv", delim = ",")

# municipalities
municipalities <- readxl::read_excel("data/gemeindeverzeichis.xlsx", sheet = "GDE") |>
  filter(GDEKT == "BL") |>
  select(GDENR, GDENAME)

#> retrofit data
retrofit_m01 <- read_delim("data/sanierungen_typ_M01.csv", delim = ",", show_col_types = FALSE)
retrofit_bl01 <- read_delim("data/sanierungen_typ_BL01.csv", delim = ",", show_col_types = FALSE)
retrofit_bl20 <- read_delim("data/sanierungen_typ_BL20.csv", delim = ",", show_col_types = FALSE)
retrofit_ea <- read_delim("data/sanierungen_typ_EA.csv", delim = ",", show_col_types = FALSE)
retrofit_ec <- read_delim("data/sanierungen_typ_EC.csv", delim = ",", show_col_types = FALSE)
retrofit_geb <- read_delim("data/sanierungen_typ_GEB.csv", delim = ",", show_col_types = FALSE)
retrofit_ezb <- read_delim("data/sanierungen_typ_EZB.csv", delim = ",", show_col_types = FALSE)

# Population quarterly STA  BL
pop_quarterly_stabl <- read_delim("data/population_quarterly_stabl.csv", delim = ";", show_col_types = FALSE)


# building polygons
building_distances <- read_rds("data/buildings_distances.rds")
```


```{r}
#| label: remove-duplicates
#| include: false
#| output: false

energy_raw <- energy_raw |> distinct(egid,erhebungsjahr, .keep_all = TRUE)

energy_raw |> group_by(erhebungsjahr) |> summarize(count = n())
```

## Data matching

### Match GWR

```{r}
#| label: match-gwr-data
#| include: false

#> match building_heights
energy_clean_01 <- energy_raw |>
  left_join(gwr_building_heights, by = "egid", suffix = c("_energy", "_gwr"))


#> match entrance information, only take first entrance for each building
gwr_entrance <- gwr_entrance |>
  rename_all(tolower) |>
  dplyr::group_by(egid) |>
  dplyr::distinct(egid, .keep_all = TRUE) 

energy_clean_02 <- energy_clean_01 |>
  left_join(gwr_entrance, by = "egid") |>
  select(!c(edid, egaid, esid, strnamk, strindx, strsp, stroffiziel, dkode, dkodn, doffadr, dexpdat)) 

```

### Match STATPOP data {#sec-adding-statpop-data}

STATPOP data has been matched to gwr_building using QGIS (see "/qgis_statpop). Here, we only match it to the energy data.

```{r}
#| label: match-statpop-data
#| include: false

gwr_building_statpop <- gwr_building_statpop |>
  select(-egid) |>
  rename(egid = fid)

gwr_building_statpop_2016 <- gwr_building_statpop |>
  select(egid, starts_with("B16"), starts_with("H16")) |>
  rename_all(~ str_remove(., "B16")) |>
  rename_all(~ str_remove(., "H16")) |>
  rename_statpop() |>
  mutate(survey_year = 2016)


gwr_building_statpop_2018 <- gwr_building_statpop |>
  select(egid, starts_with("B18"), starts_with("H18")) |>
  rename_all(~ str_remove(., "B18")) |>
  rename_all(~ str_remove(., "H18")) |>
  rename_statpop()|>
  mutate(survey_year = 2018)

gwr_building_statpop_2020 <- gwr_building_statpop |>
  select(egid, starts_with("B20"), starts_with("H20")) |>
  rename_all(~ str_remove(., "B20")) |>
  rename_all(~ str_remove(., "H20")) |>
  rename_statpop()|>
  mutate(survey_year = 2020)

gwr_building_statpop_all <- gwr_building_statpop_2016 |>
  bind_rows(gwr_building_statpop_2018) |>
  bind_rows(gwr_building_statpop_2020)

energy_clean_02 <- energy_clean_02 |>
  left_join(gwr_building_statpop_all, by = c("egid"="egid", "erhebungsjahr" = "survey_year"))
```


### Match heating degree days 
```{r}
#| label: match-heating-degree-days
#| include: false

#> Adding yearly heating degree days (hdd)
#> Accumulated temperature differences (adt)

energy_clean_03 <- energy_clean_02 |>
  mutate(hdd = case_when(erhebungsjahr == 2016 ~ 3024.3,
                         erhebungsjahr == 2018 ~ 	2618.7,
                         erhebungsjahr == 2020 ~ 	2507.2),
         adt = case_when(erhebungsjahr == 2016 ~ NA_real_,
                         erhebungsjahr == 2018 ~ 	1179,
                         erhebungsjahr == 2020 ~ 	1051))


```

### Conversion

```{r}
#| label: conversion-kwh 
#| include: false

#> convert kwh to mwh everywhere

energy_clean_04 <- energy_clean_03 |>
  mutate(produktion_soko_mwh = if_else(!is.na(produktion_soko_kwh),produktion_soko_kwh/1000,0),
         verbrauch_warmwasser_mwh = verbrauch_warmwasser_kwh/1000)
```

### Definition of data types

```{r}
#| label: clean-data-types
#| include: false

#> Set datatypes explicitly

energy_clean_05 <- energy_clean_04 |>
  mutate_at(vars(erhebungsjahr, genh1_energy, genw1_energy, energienutzung_anlage, ggdenr, gbaup, gbaum, gksce, gwaerzh1, genh1_gwr, gwaersceh1, gwaerzw1, genw1_gwr, genw1_gwr, gwaerscew1, k_gsknu, k_gskqu, k_gska, k_gphvoqu, k_idwv, k_wvhz, gkat, gklas, gstat, gvolnorm, gvolsce, k_gsoko, k_gphvo), factor) |>
  mutate_at(vars(egid, anzahl_bewohner, baujahr_anlage, gbauj, gabbj, gastw, gazzi, k_ganzwhg, k_egid_hz), as.integer) |>
  mutate_at(vars(verbrauch_erhoben_mwh, verbrauch_geschaetzt_mwh, heizkoeffizient_erhoben, heizkoeffizient_geschaetzt, wirkungsgrad_anlage, bruttogeschossflaeche, produktion_soko_kwh, k_gskfl, k_gphvokw, garea, gvol, gebf, meters_above_sealevel, produktion_soko_mwh, verbrauch_warmwasser_mwh, beheizte_flache), as.double) |>
  mutate_at(vars(gbez), as.character) |>
  mutate_at(vars(gwaerdath1, gwaerdatw1), as.Date)
```

### Renaming

For easier use in the further analysis, we convert the column names to english and use namings that are easy to understand.

```{r}
#| label: rename-columns
#| include: false

#> rename columns to english

energy_clean_06 <- energy_clean_05 |>
  rename(
    egid = egid,
    survey_year = erhebungsjahr,
    energy_source_heat_1 = genh1_energy,
    energy_source_water_1 = genw1_energy,
    energy_consumed_measured_mwh = verbrauch_erhoben_mwh,
    energy_consumed_estimated_mwh = verbrauch_geschaetzt_mwh,
    num_residents = anzahl_bewohner,
    heating_coefficient_measured = heizkoeffizient_erhoben,
    heating_coefficient_estimated = heizkoeffizient_geschaetzt,
    gross_floor_area_m2 = bruttogeschossflaeche,
    heated_area_m2 = beheizte_flache,
    year_of_installation = baujahr_anlage,
    efficiency_of_installation = wirkungsgrad_anlage,
    energy_usage_of_installation = energienutzung_anlage,
    energy_consumed_hot_water_kwh = verbrauch_warmwasser_kwh,
    energy_consumed_hot_water_mwh = verbrauch_warmwasser_mwh,
    energy_production_solar_kwh = produktion_soko_kwh,
    energy_production_solar_mwh = produktion_soko_mwh,
    solar_system = k_gsoko,
    solar_system_area_m2 = k_gskfl,
    solar_type = k_gska,
    solar_system_usage = k_gsknu,
    solar_system_source = k_gskqu,
    photovoltaic_system = k_gphvo,
    photovoltaic_system_power_kw = k_gphvokw,
    photovoltaic_system_source = k_gphvoqu,
    district_heating_id = k_idwv,
    district_heating_role = k_wvhz,
    heated_by_egid = k_egid_hz,
    house_number = gebnr,
    municipality_code = ggdenr,
    building_name = gbez,
    building_category = gkat,
    building_class = gklas,
    building_status = gstat,
    construction_year = gbauj,
    construction_period = gbaup,
    construction_month = gbaum,
    demolition_year = gabbj,
    building_area_m2 = garea,
    building_volume_m3 = gvol,
    building_volume_norm = gvolnorm,
    building_volume_source = gvolsce,
    energy_reference_area = gebf,
    coordinate_e = gkode,
    coordinate_n = gkodn,
    coordinate_system_source = gksce,
    num_floors = gastw,
    num_separate_living_space = gazzi,
    num_dwellings = k_ganzwhg,
    energy_installation_1_gwr = gwaerzh1,
    energy_source_heat_1_gwr = genh1_gwr,
    energy_heat_1_date = gwaerdath1,
    energy_heat_1_source = gwaersceh1,
    energy_water_installation_1_gwr = gwaerzw1,
    entrance_number = deinr,
    entrance_streetname = strname,
    entrance_municipality_name = dplzname,
    entrance_postal_code = dplz4,
    entrance_postal_code_add = dplzz)
```

### Calculation HEC and HEPI

To calculate the HEC for each building, we use the @eq-hec introduced in Chapter @sec-problem-definition. Based on the HEC, we can also calculate HEPI. For easier comparison with results of other publications, we use the following units:

-   HEC in kWh/year

-   HEPI in kWh/mÂ²/year

```{r}
#| label: calculate-hec-hepi
#| include: false

#> Filter: Only buildings with measured gas consumption
#> Mutation: efficiency_of_installation = 0.85 if it is NA
energy_clean_07 <- energy_clean_06 |>
  filter(energy_consumed_measured_mwh > 0 & !is.na(energy_consumed_measured_mwh)) |>
  mutate(efficiency_of_installation = if_else(is.na(efficiency_of_installation), 0.85, efficiency_of_installation),
    hec = ((energy_consumed_measured_mwh*efficiency_of_installation) + energy_production_solar_mwh - energy_consumed_hot_water_mwh)*1000,
         hepi = hec/heated_area_m2)

energy_clean_07 |>
  dplyr::group_by(building_category, energy_usage_of_installation) |>
  summarise(n = n())

energy_clean_07 |>
  filter(is.na(hepi)) |>
  select(egid, survey_year, hec, hepi, heating_coefficient_measured, efficiency_of_installation, energy_production_solar_mwh, energy_consumed_hot_water_mwh, energy_consumed_measured_mwh, num_residents)

energy_clean_07 |>
  filter(is.na(heating_coefficient_measured) & !is.na(energy_consumed_measured_mwh) & building_category == 1020) |>
  select(egid, survey_year,heating_coefficient_measured, efficiency_of_installation, energy_production_solar_mwh, energy_consumed_hot_water_mwh, energy_consumed_measured_mwh, num_residents)
```


### Data filtering

In order to prepare the data for modelling, we apply the following filters:

-   Only residential buildings (`gkat = 1020`)
-   Only buildings with a HEPI \> 20 kWh/mÂ² or HEPI \<300 kWh/mÂ²
-   Only buildings where the gas is used for HEC or for DWH+HEC. As this information is absent for many buildings, we also include `NA` values here.

```{r}
#| label: filter-data
#| include: false

#> Filter to relevant buildings for modelling

energy_clean_08 <- energy_clean_07 |>
  filter(between(hepi,20,300),
         building_category == 1020,
         energy_usage_of_installation %in% c("RaumwÃ¤rme + Warmwasser", NA)
         )

energy_clean_08 |>
  dplyr::select(building_class, heating_coefficient_measured, hepi) |>
  dplyr::group_by(building_class) |>
  dplyr::summarise(mean_hepi = mean(hepi),
                   mean_coeff = mean(heating_coefficient_measured))

plausi <- energy_clean_08 |> 
  mutate(diff_hepi = hepi - heating_coefficient_measured,
         diff_hepi_percent = abs(diff_hepi)/heating_coefficient_measured) |>
  select(egid, survey_year, diff_hepi, diff_hepi_percent, hepi, heating_coefficient_measured, hec, heated_area_m2, gross_floor_area_m2, efficiency_of_installation, energy_production_solar_mwh, energy_consumed_hot_water_mwh, energy_consumed_measured_mwh, num_residents) |>
  filter(diff_hepi_percent > 0.05 & gross_floor_area_m2 == heated_area_m2) |>
  dplyr::arrange(diff_hepi)
  
# Scatter plot by group
plausi_plot <- ggplot(energy_clean_08, aes(label=egid)) +
  geom_point(aes(x = hepi, y = heating_coefficient_measured, color = survey_year)) +
  geom_abline()

ggplotly(plausi_plot)
```

By applying the above filters, we obtain a dataset of about `r nrow(energy_clean_07)` observations. As the dataset contains measured gas consumption for the years 2016, 2018 and 2020, one building can be present three times.

```{r}
#| label: plot-energy-measured
#| include: false

hec_check <- energy_clean_08 |>
  select(egid, energy_consumed_measured_mwh, energy_usage_of_installation, hec, hepi,efficiency_of_installation ,energy_production_solar_mwh,
         energy_consumed_hot_water_mwh, energy_consumed_estimated_mwh, heating_coefficient_measured, heating_coefficient_estimated)

mean(energy_clean_08$heating_coefficient_measured, na.rm = T)
mean(energy_clean_08$hepi)

ggplot(data = hec_check, aes(x = hepi)) +
  geom_histogram()


energy_clean_08 |>
  select(survey_year, heating_coefficient_measured, hepi) |>
  gather(key=key, value=value, -survey_year) |>
  ggplot(aes(x=survey_year, fill=key)) +
  geom_bar(position = "dodge") +
  scale_y_continuous(labels = comma) +
  xlab("Survey year") +
  ylab("MWh") +
  theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))


```

### Retrofit data

```{r}
#| label: rename-retrofit-data
#| include: false

dfs_to_translate <- list(retrofit_bl01, retrofit_bl20, retrofit_ea, retrofit_ec, retrofit_ezb, retrofit_geb, retrofit_m01)

colnames_to_translate <- sapply(dfs_to_translate, colnames) |>
  unlist() |>
  unique()

colnames_to_translate = colnames_to_translate[!duplicated(colnames_to_translate)]

translated_cols <- c(
      admin_id = "Administration\nGesuch-ID",
      admin_project_type = "Administration\nProjekttyp",
      admin_project_name = "Administration\nProjektname",
      applicant_name = "Gesuchsteller\nVor- & Nachname",
      property_address = "Liegenschaft\nAdresse",
      admin_status = "Administration\nStatus",
      admin_approval_year = "Administration\nZusicherungs-Jahr",
      param_windows = "Projekt- und Massnahmedaten (Eingabeparameter)\nA Fenster",
      param_roof = "Projekt- und Massnahmedaten (Eingabeparameter)\nB1 Dach",
      param_wall_exterior = "Projekt- und Massnahmedaten (Eingabeparameter)\nB2 Wand gegen aussen (Fassade)",
      param_floor_exterior = "Projekt- und Massnahmedaten (Eingabeparameter)\nB3 Boden gegen aussen (Untersicht)",
      param_wall_underground = "Projekt- und Massnahmedaten (Eingabeparameter)\nB4 Wand im Erdreich (bis 2m)",
      param_floor_underground = "Projekt- und Massnahmedaten (Eingabeparameter)\nB5 Boden im Erdreich (bis 2m)",
      param_wall_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC1 Wand gegen unbeheizt",
      param_ceiling_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC2 Decke gegen unbeheizt (Estrichboden)",
      param_floor_unheated = "Projekt- und Massnahmedaten (Eingabeparameter)\nC3 Boden gegen unbeheizt (Kellerdecke)",
      param_wall_subsurface_deep = "Projekt- und Massnahmedaten (Eingabeparameter)\nC4 Wand im Erdreich (mehr als 2m im Erdreich)",
      param_floor_subsurface_deep = "Projekt- und Massnahmedaten (Eingabeparameter)\nC5 Boden im Erdreich (mehr als 2m im Erdreich)",
      param_construction_start = "Projekt- und Massnahmedaten (Eingabeparameter)\nBaubeginn",
      param_construction_completion = "Projekt- und Massnahmedaten (Eingabeparameter)\nBaufertigstellung",
      param_new_heated_rooms = "Projekt- und Massnahmedaten (Eingabeparameter)\nWerden bestehende RÃ¤ume neu beheizt?\t",
      param_investment_costs = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvestitionskosten in CHF",
      param_geak_plus_analysis = "Projekt- und Massnahmedaten (Eingabeparameter)\nGEAK Plus / Grobanalyse vorhanden?",
      param_heating_post_renovation = "Projekt- und Massnahmedaten (Eingabeparameter)\nWÃ¤rmeerzeugung nach der Sanierung",
      param_heating_pre_renovation = "Projekt- und Massnahmedaten (Eingabeparameter)\nWÃ¤rmeerzeugung vor der Sanierung",
      param_additions_planned = "Projekt- und Massnahmedaten (Eingabeparameter)\nSind Anbauten, Aufbauten oder eine Aufstockung projektiert?",
      "property_street" = "Liegenschaft\nStrasse",
      "property_number" = "Liegenschaft\nNr.",
      "property_zip" = "Liegenschaft\nPLZ",
      "property_city" = "Liegenschaft\nOrt",
      "property_political_municipality" = "Liegenschaft\nPolitische Gemeinde",
      "egid" = "Liegenschaft\neidgenÃ¶ssischer GebÃ¤udeidentifikator",
      "property_parcel_number" = "Liegenschaft\nParzellen-Nr.",
      "param_project_code" = "Projekt- und Massnahmedaten (Eingabeparameter)\nProjektcode",
      "param_geak" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGEAK",
      "param_costs" = "Projekt- und Massnahmedaten (Eingabeparameter)\nKosten",
      "param_heating_pre_renovation" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizung vor Sanierung",
      "param_primary_heating_system" = "Projekt- und Massnahmedaten (Eingabeparameter)\nPrim. Heizsystem",
      "param_heat_savings" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEinsparung WÃ¤rme",
      "param_hot_water" = "Projekt- und Massnahmedaten (Eingabeparameter)\nBrauchwarmwasser",
      "param_heating_demand_heating_degree" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizwÃ¤rmebedarf Hg",
      "param_heating_demand_quartely" = "Projekt- und Massnahmedaten (Eingabeparameter)\nHeizwÃ¤rmebedarf Qh",
      "param_renewable_heat_production" = "Projekt- und Massnahmedaten (Eingabeparameter)\nErneuerbare WÃ¤rmeprod.",
      "param_nonrenewable_heat_production" = "Projekt- und Massnahmedaten (Eingabeparameter)\nNicht erneuerbare WÃ¤rmeprod.",
      "param_building_type" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGebÃ¤ude-Typ",
      "param_residential_buildings" = "Projekt- und Massnahmedaten (Eingabeparameter)\nWohnbauten",
      "param_insulation_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. DÃ¤mmung",
      "param_heating_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Heizung",
      "param_ventilation_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. LÃ¼ftung",
      "param_hot_water_investment" = "Projekt- und Massnahmedaten (Eingabeparameter)\nInvest. Warmwasser",
      "param_type" = "Projekt- und Massnahmedaten (Eingabeparameter)\nArt",
      "param_energy_reference_area" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEnergiebezugsflÃ¤che",
      "param_construction_completion" = "Projekt- und Massnahmedaten (Eingabeparameter)\nFertigstellung",
      "param_new_heated_rooms" = "Projekt- und Massnahmedaten (Eingabeparameter)\nRÃ¤ume neu beheizt",
      "param_overall_renovation_standard" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGesamtsan.-Standard",
      "param_window_facade_roof" = "Projekt- und Massnahmedaten (Eingabeparameter)\nA1 Fenster mit Fassade/Dach",
      "param_wall_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB2 Wand gegen aussen",
      "param_ceiling_unheated" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC2 Decke gegen unbeheizt",
      "param_floor_unheated" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC3 Boden gegen unbeheizt",
      "param_wall_subsurface_deep" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC4 Wand im Erdreich (> 2m)",
      "param_floor_subsurface_deep" = "Projekt- und Massnahmedaten (Eingabeparameter)\nC5 Boden im Erdreich (> 2m)",
      "admin_payment_year" = "Administration\nAuszahlungs-Jahr",
      "param_additions_planned" = "Projekt- und Massnahmedaten (Eingabeparameter)\nAnbau oder Aufstockung geplant",
      "param_overall_renovation_standard" = "Projekt- und Massnahmedaten (Eingabeparameter)\nGesamtsan.-Standard",
      "param_analysis_exists" = "Projekt- und Massnahmedaten (Eingabeparameter)\nAnalyse bereits vorhanden",
      "param_energy_analysis_with_geak" = "Projekt- und Massnahmedaten (Eingabeparameter)\nEnergieanalyse mit GEAK?",
      "param_costs_energy_analysis" = "Projekt- und Massnahmedaten (Eingabeparameter)\nKosten (gemÃ¤ss Offerte fÃ¼r Energieanalyse)",
      "param_geak_plus_analysis_exists" = "Projekt- und Massnahmedaten (Eingabeparameter)\nLiegt der GEAK Plus oder die GebÃ¤udeanalyse mit Vorgehensempfehlung bereits vor? Ja/Nein",
      "param_windows_no_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nA2 Fenster ohne Fassade/Dach",
    "param_floor_exterior" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB3 Boden gegen aussen",
    "param_wall_underground" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB4 Wand im Erdreich (< 2m)",
    "param_floor_underground" = "Projekt- und Massnahmedaten (Eingabeparameter)\nB5 Boden im Erdreich (< 2m)"
      
)



translate_colnames <- function(df) {
  df <- df |>
    rename(any_of(translated_cols))
}

translate_colnames <- function(df) {
  object_name <- deparse(substitute(df))
  df_clean <- df |>
    rename(any_of(translated_cols))
  assign(paste0(object_name, "_clean"), df_clean, envir = .GlobalEnv)
}


translate_colnames(retrofit_bl01)
translate_colnames(retrofit_bl20)
translate_colnames(retrofit_ea)
translate_colnames(retrofit_ec)
translate_colnames(retrofit_ezb)
translate_colnames(retrofit_geb)
translate_colnames(retrofit_m01)

#> check translated names in new dfs

dfs_translated <- list(retrofit_bl01_clean, retrofit_bl20_clean, retrofit_ea_clean, retrofit_ec_clean, retrofit_ezb_clean, retrofit_geb_clean, retrofit_m01_clean)

colnames_translated <- sapply(dfs_translated, colnames) |>
  unlist() |>
  unique()


```

```{r}
#| label: match-egid-retrofit-data 
#| include: false

#> Merge the data frames into one
retrofit_dfs <- list(retrofit_bl01_clean, retrofit_bl20_clean, retrofit_ea_clean, retrofit_ec_clean, retrofit_ezb_clean, retrofit_geb_clean, retrofit_m01_clean)

coerce_columns <- function(df, columns) {
df[columns] <- lapply(df[columns], as.character)
df
}

retrofit_all <- map_df(retrofit_dfs, coerce_columns, c("egid", "property_parcel_number")) |>
  bind_rows()

#> sometimes mulitple egid separated by "|", so we split the column at /
retrofit_all_clean <- retrofit_all |>
  mutate(egid = str_trim(egid)) |>
  separate_rows(egid, sep = ("/")) |>
  separate_rows(egid, sep = ("&")) |>
  mutate(egid = as.integer(egid))


#> remove records where admin_status = "Storniert"
retrofit_all_clean <- retrofit_all_clean |>
  filter(admin_status != "Storniert")

#> adding missing egid
retrofit_all_clean <- left_join(retrofit_all_clean, gwr_entrance, by = c("property_street" = "strname", "property_number" = "deinr", "property_zip" = "dplz4"), suffix = c('.retrofit', '.gwr')) |>
  rename(egid = egid.gwr)


```

```{r}
#| label: calculate-retrofit-year 
#| include: false


# create a new variable called year_completion, which is the year of construction completion, payment year, or approval year
# if construction completion year is not missing, use that year
# if payment year is not missing, use that year
# if both construction completion year and payment year are missing, use approval year
retrofit_all_clean <- retrofit_all_clean |> 
  mutate(year_completion = case_when(!is.na(param_construction_completion) ~ lubridate::year(param_construction_completion),
                                     !is.na(admin_payment_year) ~ admin_payment_year,
                                     !is.na(admin_approval_year) ~ admin_approval_year)) |>
  mutate(year_completion = if_else(is.na(year_completion), str_sub(admin_id, 1, 4), as.character(year_completion))) |>
  mutate(year_completion = as.integer(year_completion))




table(retrofit_all_clean$year_completion, useNA = "ifany")
```

```{r}
#| label: add-retrofit 
#| include: false

retrofit_all_match <- retrofit_all_clean |>
  filter(year_completion >=2009,
         year_completion <= 2023,
         !is.na(egid)) |>
  select(egid, admin_id, admin_project_type, admin_project_name, param_investment_costs, year_completion) |>
  arrange(year_completion) |>
  distinct(egid, .keep_all = TRUE)

#> match with energy df

energy_clean_09 <- energy_clean_08 |>
  left_join(retrofit_all_match, by = "egid") |>
  #> create new variable "retrofitted" based on survey_year and year_completion: Buildings only count as retrofitted if the year of completion is before the survey year
  mutate(retrofitted = case_when(survey_year == 2016 & year_completion < 2016 ~ 'Yes',
                                 survey_year == 2018 & year_completion < 2018 ~ 'Yes',
                                 survey_year == 2020 & year_completion < 2020 ~ 'Yes',
                                 TRUE ~ 'No')) |>
  mutate(retrofitted = as.factor(retrofitted)) |>
  #> set retrofit variables to NA if building is not tagged as retrofitted
  mutate(admin_id = if_else(retrofitted == 'Yes', admin_id, NA_character_), 
         admin_project_type = if_else(retrofitted == 'Yes', admin_project_type, NA_character_), 
         admin_project_name = if_else(retrofitted == 'Yes', admin_project_name, NA_character_), 
         param_investment_costs = if_else(retrofitted == 'Yes', param_investment_costs, NA_real_),
         year_completion = if_else(retrofitted == 'Yes', year_completion, NA_integer_)) |>
  rename(retrofit_id = admin_id, 
         retrofit_project_type = admin_project_type, 
         retrofit_project_name = admin_project_name, 
         retrofit_investment_costs = param_investment_costs, 
         retrofit_year_completion = year_completion)


energy_clean_09 |>
  group_by(survey_year, retrofitted, retrofit_year_completion) |>
  dplyr::summarise(n = n())
```

### Cleaning binary variables

```{r}
energy_clean_10 <- energy_clean_09 |>
  mutate(solar_system = if_else(is.na(solar_system), "No", "Yes"),
         photovoltaic_system = if_else(is.na(photovoltaic_system), "No", "Yes"))


table(energy_clean_10$solar_system)
table(energy_clean_10$photovoltaic_system)
```

### Handling NA's

```{r}
energy_clean_11 <- energy_clean_10 |>
  mutate(retrofit_investment_costs = if_else(is.na(retrofit_investment_costs), 0, retrofit_investment_costs),
         photovoltaic_system_power_kw = if_else(is.na(photovoltaic_system_power_kw), 0, photovoltaic_system_power_kw),
         solar_system_usage = fct_explicit_na(solar_system_usage),
         solar_system_area_m2 = if_else(is.na(solar_system_area_m2), 0, solar_system_area_m2),
         energy_usage_of_installation = fct_explicit_na(energy_usage_of_installation))

summary(energy_clean_11$retrofit_investment_costs)
summary(energy_clean_11$photovoltaic_system_power_kw)
summary(energy_clean_11$solar_system_usage)
summary(energy_clean_11$solar_system_area_m2)
summary(energy_clean_11$energy_usage_of_installation)
```

## Drop unused levels

```{r}
# remove unused levels
energy_clean_12 <- energy_clean_11 |>
  mutate(energy_usage_of_installation = droplevels(energy_usage_of_installation),
         photovoltaic_system_source = droplevels(photovoltaic_system_source),
         municipality_code = droplevels(municipality_code),
         building_category = droplevels(building_category),
         building_class = droplevels(building_class))

# check for unused levels
unused_levels <- lapply(energy_clean_12, function(x) {
    if(is.factor(x)){
      levels(x)[!levels(x) %in% x]
    }
})

unused_levels <- Filter(function(x) length(x) > 0, unused_levels)

unused_levels

```

## Recalculate results of current method

To make sure that the values of the current method are correct, we recalculate them here, as it could have happened that the the heated area has been updated since the initial calculation.

```{r}
energy_clean_13 <- energy_clean_12 |>
  dplyr::mutate(hepi_pred_current_method = heating_coefficient_estimated,
                hec_pred_current_method = heating_coefficient_estimated*heated_area_m2)
```


## Add mean population
```{r}
#| label: check-population-data
#| include: false
pop_quarterly_stabl |>
  dplyr::group_by(jahr, quartal) |>
  dplyr::summarise(n = sum(dp_anzahl))


pop_quarterly_stabl_transformed <- pop_quarterly_stabl |>
  group_by(gebaeudeidentifikator_egid, jahr, quartal) |>
  summarise(dp_anzahl = sum(dp_anzahl)) |>
  pivot_wider(names_from = quartal, values_from = dp_anzahl, names_prefix = "Q")


pop_quarterly_stabl_mean <- pop_quarterly_stabl_transformed |>
  rowwise() |>
  mutate(num_residents_mean = mean(c(Q1, Q2, Q3, Q4)),
         jahr = as.factor(jahr))
```

```{r}
energy_clean_14 <- energy_clean_13 |>
  inner_join(pop_quarterly_stabl_mean, by = c("survey_year" = "jahr", "egid" = "gebaeudeidentifikator_egid"))
  
qs_pop <- energy_clean_14 |>
  select(egid, num_residents, num_residents_mean) |>
  mutate(diff_residents = num_residents - num_residents_mean) 

sum(qs_pop$num_residents, na.rm = T)
sum(qs_pop$num_residents_mean)
sum(qs_pop$diff_residents, na.rm = T)
```

## Add variable for distance to next building

```{r}
#> distances were calculated in separate script, see calculate_building_distances.R

building_distances_clean <- building_distances |>
  select(egid, nearest_distance) |>
  mutate(egid = as.integer(egid)) |>
  as.data.frame() 

# count values
summary_distances <- building_distances_clean |> 
  summarize(`Distance = 0` = sum(nearest_distance == 0),
            `0.001 < Distance <= 5` = sum(nearest_distance > 0 & nearest_distance <= 5),
            `Distance > 5` = sum(nearest_distance > 5))

summary_distances

# we consider buildings with distance = 0 as connected to other buildings, all buildings with distances > 0 as stand-alone. We create a binary variable "stand_alone"
# create stand_alone variable
building_distances_clean <- building_distances_clean |> 
  mutate(stand_alone = ifelse(nearest_distance == 0, 0, 1))

# join to energy data
energy_clean_15 <- energy_clean_14 |>
  left_join(building_distances_clean) |>
  select(-geom_text) |>
  mutate(stand_alone = base::as.factor(stand_alone))

# check
table(energy_clean_15$stand_alone)

```

## Add municipality name

```{r}
municipalities <- municipalities |>
  mutate(GDENR = base::as.factor(GDENR))

energy_clean_16 <- energy_clean_15 |>
  left_join(municipalities, by = c("municipality_code" = "GDENR")) |>
  rename(municipality_name = GDENAME) |>
  mutate(municipality_name = base::as.factor(municipality_name))
```

## Calculate social indicators

```{r}
#| label: calculate-social-indicators
#| include: false


# Calculate the social indicators
energy_clean_17 <- energy_clean_16 |>
  mutate(
    swiss_ratio = swiss_pop / total_pop,
    foreign_ratio = foreign_pop / total_pop,
    eu_ratio = eu_pop / total_pop,
    eur_ratio = eur_pop / total_pop,
    non_eur_ratio = non_eur_pop / total_pop,
    born_swiss_ratio = born_swiss_pop / total_pop,
    born_abroad_ratio = born_abroad_pop / total_pop,
    male_ratio = male_pop / total_pop,
    female_ratio = female_pop / total_pop,
    residence_less_1_year_ratio = residence_less_1_year / total_pop,
    residence_1_5_years_ratio = residence_1_5_years / total_pop,
    residence_6_10_years_ratio = residence_6_10_years / total_pop,
    residence_more_10_years_ratio = residence_more_10_years / total_pop,
    residence_since_birth_ratio = residence_since_birth / total_pop,
    household_1_person_ratio = household_1_person / household_total,
    household_2_person_ratio = household_2_person / household_total,
    household_3_person_ratio = household_3_person / household_total,
    household_4_person_ratio = household_4_person / household_total,
    household_5_person_ratio = household_5_person / household_total,
    household_6_person_ratio = household_6_person / household_total,
    above_65 = male_65_69 + male_70_74 + male_75_79 + male_80_84 + male_85_89 + male_90plus + female_65_69 + female_70_74 + female_75_79 + female_80_84 + female_85_89 + female_90plus,
         elderly_ratio = above_65 / total_pop,
    below_15 = male_0_4 + male_5_9 + male_10_14 + female_0_4 + female_5_9 + female_10_14,
    youth_ratio = below_15 / total_pop)




# Reshape the data to a long format
indicators <- c("swiss_ratio", "foreign_ratio", "eu_ratio", "eur_ratio", "non_eur_ratio",
                "born_swiss_ratio", "born_abroad_ratio", "male_ratio", "female_ratio",
                "residence_less_1_year_ratio", "residence_1_5_years_ratio", "residence_6_10_years_ratio",
                "residence_more_10_years_ratio", "residence_since_birth_ratio", "household_1_person_ratio",
                "household_2_person_ratio", "household_3_person_ratio", "household_4_person_ratio",
                "household_5_person_ratio", "household_6_person_ratio")

long_energy_clean_17 <- energy_clean_17 %>%
  select(indicators) %>%
  gather(key = "indicator", value = "value", -c())

# Create boxplots of all indicators at once using facets
ggplot(long_energy_clean_17, aes(x = indicator, y = value)) +
  geom_boxplot() +
  facet_wrap(~ indicator, scales = "free", ncol = 4) +
  labs(y = "Value", x = "", title = "Boxplots of All Indicators") +
  theme_minimal() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())


# Create boxplots of all indicators at once using facets
# Create histograms of all indicators at once using facets
ggplot(long_energy_clean_17, aes(x = value)) +
  geom_histogram(bins = 30, color = "black", fill = "lightblue") +
  facet_wrap(~ indicator, scales = "free", ncol = 4) +
  labs(y = "Frequency", x = "Value", title = "Histograms of All Indicators") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
## Save data

```{r}
write_rds(energy_clean_06, "data/energy_classification_energy_source.rds")
write_rds(energy_clean_17, "data/energy_modelling.rds")
write_delim(energy_clean_17, "data/energy_modelling.csv")
```
