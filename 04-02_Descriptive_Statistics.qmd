# Results {#sec-results}

In this chapter, the results of our analysis will be presented. In a first step, we will conduct a descriptive and exploratory analysis in @sec-exploratory-analysis of the data used for modelling. In @sec-model-evaluation, we will present and compare the results of the different models. Finally in @sec-final-model, we will provide the results of the final model and the sensitivity analysis of the input features.

```{r}
#| label: load-libs
#| include: false

if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, tidymodels, doParallel, skimr, plotly, sf, agua, gt,
               rules, baguette, ggridges, viridis, hrbrthemes, finetune, ggrepel,
               vip, shapviz, DALEXtra, gtsummary)

```

```{r}
#| label: load-data
#| include: false

energy_modelling <- read_rds("data/energy_modelling.rds")
```

## Descriptive statistics {#sec-descriptive-statistics}

To gain a first overview of the data that we use for modelling, we here present the summary statistics and visual exploration of the data. The final dataset that for modelling is the result of joining data from different sources that are provided in @sec-methodology. Furthermore, we applied several filters that are outlined in @sec-data-prep.

### Summary statistics

The final dataset for modelling contains `r nrow(energy_modelling)` observations (buildings). As we consider data from the years 2016, 2018 and 2020, one building can be present in the dataset three times at maximum. @tbl-obs-per-year shows that the number of gas-heated buildings is slightly decreasing between 2016 and 2020. Also, we observe a decrease of the mean HEPI and the total HEC between 2016 and 2020.

```{r}
#| label: tbl-obs-per-year
#| tbl-cap: "Number of buildings per survey year."
#| tbl-cap-location: bottom
#| warning: false

obs_per_year <- energy_modelling |>
  dplyr::group_by(survey_year) |>
  dplyr::rename("Survey Year" = survey_year) |>
  dplyr::summarise(Count = n(),
                   "Mean HEPI (kWh/m2/year)" = mean(hepi),
                   "Sum HEC (GWh/year)" = sum(hec)/1000) |>
  knitr::kable(booktabs = TRUE, digits = 1)

obs_per_year
```

```{r}
#| label: tbl-summary-stats-numeric
#| tbl-cap: "Summary statistics of numeric variables."
#| tbl-cap-location: bottom


summary_table_numeric <- energy_modelling |>
  select(construction_year, num_floors, stand_alone, num_dwellings, num_residents_mean, meters_above_sealevel, hdd, energy_production_solar_mwh) |>
  skim()

# select columns of interest
summary_table_numeric <- summary_table_numeric |>
  select(skim_variable, complete_rate, numeric.p0, numeric.p25, numeric.p50, numeric.p75, numeric.p100) |>
  rename("Name" = skim_variable, 
         "Complete rate" =  complete_rate,
         "Min" = numeric.p0, 
         "25%" = numeric.p25,
         "50%" = numeric.p50, 
         "75%" = numeric.p75, 
         "Max" = numeric.p100) |>
  as.data.frame() |>
  knitr::kable(booktabs = TRUE, digits = 1)

summary_table_numeric
```

```{r}
#| label: tbl-summary-stats
#| tbl-cap: "Summary statistics of modelling input data."
#| tbl-cap-location: bottom

summary_stats_numeric <- energy_modelling |>
  select(- c(Q1, Q2, Q3, Q4)) |>
  skim() |>
  yank("numeric") |>
  knitr::kable(booktabs = TRUE, digits = 1)


energy_modelling |> 
  select(entrance_municipality_name , construction_period) |>
  tbl_summary(by = construction_period) |>
  add_n() |>
  bold_labels() %>%
  modify_spanning_header(all_stat_cols() ~ "**Chemotherapy Treatment**")
```

### Retrofitting

```{r}
#| label: indicators-retrofit
#| echo: false

#> Calculations of numbers and indicators for easier use as inline code in text.

n_retrofit <- energy_modelling |> filter(retrofitted == "Yes") |> nrow()

n_retrofit_m01 <- energy_modelling |> 
  filter(retrofitted == TRUE,
         retrofit_investment_costs > 0) |> 
  nrow()

perc_retrofit <- round((n_retrofit / nrow(energy_modelling))*100,digits = 2)
```

In the total dataset, we observe `r n_retrofit` building that could be matched with a retrofit measure. This represents `r perc_retrofit` % of all the buildings in the data that we use for modelling.

The retrofit data considers retrofit measures that have been financially supported by the cantonal FÃ¶rderprogramm (Baselbieter Energiepaket) since 2009.

```{r}
#| label: fig-retrofit-year
#| fig-cap: "Distribution of retrofit year."

retrofit_per_year <- energy_modelling |>
  dplyr::filter(retrofitted == "Yes") |>
  ggplot((aes(retrofit_year_completion))) +
           geom_bar(aes(fill = retrofit_project_name)) +
  scale_x_continuous(breaks=seq(2009, 2019, 1))
  
  
retrofit_per_year
```

A first explorative way of analyzing the effect of retrofit measures consists in comparing the mean HEPI of retrofitted building and non-retrofitted buildings. @tbl-retrofit shows the mean HEPI per survey year and building class. For all years and building classes, the mean HEPI of retrofitted buildings is lower. Furthermore, a more important difference in average HEPI between retrofitted and non-retrofitted buildings can be observed for multi-family buildings (buildings with two or more apartments) over the course of all three years. This could potentially indicate that retrofit measures are more effective in terms of energy consumption reduction for multi-family houses in comparison to single-family houses.

```{r}
#| label: tbl-retrofit
#| tbl-cap: "Mean HEPI of retrofitted versus non-retrofitted."
#| tbl-cap-location: bottom
#| eval: false

retrofit_mean_hepi <- energy_modelling |>
  dplyr::group_by(survey_year, building_class, retrofitted) |>
  dplyr::rename("Survey Year" = survey_year) |>
  dplyr::summarise("Mean HEPI (kWh/m2/year)" = mean(hepi)) |>
  mutate(building_class = factor(building_class, 
                                  levels = c("1110", "1121", "1122"), 
                                  labels = c("Building with one apartment", 
                                             "Building with two apartments", 
                                             "Building with three or more apartments"))) |>
  dplyr::rename("Building class" = building_class) |>
  spread(retrofitted, `Mean HEPI (kWh/m2/year)`) |>
  rename(`Retrofitted` = "Yes", `Not retrofitted` = "No") |>
  mutate(`Difference in %` = 100 * (`Retrofitted` - `Not retrofitted`) / `Not retrofitted`) |>
  knitr::kable(booktabs = TRUE, digits = 1) 

retrofit_mean_hepi
```

```{r}
#| label: fig-retrofitting-investment-costs
#| fig-cap: "Correlation between retrofit investment costs and HEPI"

retrofit_investment_plot <- energy_modelling |>
  filter(!is.na(retrofit_investment_costs) & retrofit_investment_costs > 0) |>
  ggplot((aes(retrofit_investment_costs, hepi))) +
           geom_point()

retrofit_investment_plot
```

```{r}
#| label: fig-retrofitting
#| fig-cap: "Construction year per municipality"

retrofit_plot <- energy_modelling |>
  filter(retrofitted == "Yes") |>
  arrange(desc(egid)) |>
  distinct(egid, survey_year, retrofit_year_completion, energy_consumed_measured_mwh) |>
  pivot_wider(names_from = survey_year, names_prefix = "energy_consumed_measured_mwh_", values_from = energy_consumed_measured_mwh) 

retrofit_plot_2016_2018 <- retrofit_plot |>
  ggplot((aes(energy_consumed_measured_mwh_2018, energy_consumed_measured_mwh_2016))) +
           geom_point() +
  xlim(0,200) +
  ylim(0,200) +
  geom_abline(intercept = 0, slope = 1) +
  labs(title = 'HEPI of buildings retrofitted between 2016 and 2018')

retrofit_plot_2018_2020 <- retrofit_plot |>
  ggplot((aes(energy_consumed_measured_mwh_2018, energy_consumed_measured_mwh_2020))) +
           geom_point() +
  xlim(0,200) +
  ylim(0,200) +
  geom_abline(intercept = 0, slope = 1) +
  labs(title = 'HEPI of buildings retrofitted between 2018 and 2020')

retrofit_plot_2016_2020 <- retrofit_plot |>
  ggplot((aes(energy_consumed_measured_mwh_2016, energy_consumed_measured_mwh_2020))) +
           geom_point() +
  xlim(0,200) +
  ylim(0,200) +
  geom_abline(intercept = 0, slope = 1) +
  labs(title = 'HEPI of buildings retrofitted between 2018 and 2020')
```

```{r}
retrofit_plot_2016_2018
retrofit_plot_2018_2020
retrofit_plot_2016_2020
```

### Geographical distribution

```{r}
#| label: indicators-municipalities
#| echo: false

#> Calculations of numbers and indicators for easier use as inline code in text.
n_municipalities <- n_distinct(energy_modelling$municipality_code)
```

In this section, we will have a closer look at the characteristics of the `r n_municipalities` that are represented in the data. Exploring characteristics and potential differences on the municipal level can sustain the modelling process by providing insights into the distribution and variability of energy consumption patterns among different municipalities.

```{r}
#| label: tbl-summary-municipality
#| tbl-cap: "Summary statistics per municipality"
#| tbl-cap-location: bottom

#> Filter to relevant buildings for modelling

summary_table <- energy_modelling |>
  group_by(entrance_municipality_name, building_class) |>
  summarise(n = n()) |>
  pivot_wider(names_from = building_class, 
              values_from = n)

summary_table
```

```{r}
#| label: boxplot-municipality
#| include: false

#> basic function
plot_boxplot <- function(df, y_axis) {
  y_axis <- sym(y_axis)
  df |>
    mutate(class = fct_reorder(entrance_municipality_name, !!y_axis, .fun='median')) |>
    ggplot( aes(x=reorder(entrance_municipality_name, !!y_axis), y=!!y_axis, fill=entrance_municipality_name)) + 
      geom_boxplot() +
      xlab("class") +
      theme(legend.position="none") +
      xlab("") +
      labs(paste0(y_axis," per municipality")) +
      coord_flip()
}
#> Creating boxplots for different input variables
boxplot_construction_year <- plot_boxplot(energy_modelling, "construction_year")
boxplot_building_area_m2 <- plot_boxplot(energy_modelling, "building_area_m2")
boxplot_num_residents <- plot_boxplot(energy_modelling, "num_residents")
boxplot_hepi <- plot_boxplot(energy_modelling, "hepi")

```

```{r}
#| label: fig-municipality-hepi
#| fig-cap: "HEPI per municipality"
#| include: false

boxplot_hepi

```

```{r}
#| label: fig-municipality-construction-year
#| fig-cap: "Construction year per municipality"

boxplot_construction_year

```

### Ridgeline plots

```{r}
#| label: fig-hepi-municipality
#| fig-cap: "HEPI density plot per municipality"

energy_modelling |>
  filter(building_class == 1110) |>
  ggplot(aes(x = hepi, y = entrance_municipality_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(scale = 5, rel_min_height = 0.02) +
  scale_fill_viridis(name = "HEPI (kWh/m2/year)", option = "C") +
  labs(title = 'HEPI per municipality') +
  xlim(0,300) +
   theme(axis.title.x=element_blank())
```
