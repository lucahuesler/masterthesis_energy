## Data preparation and exploration {#sec-appendix-data-preparation}

```{r}
#| label: load-libs
#| include: false

if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, tidymodels, doParallel, skimr, plotly, sf, agua, gt, patchwork, ggridges, viridis, cowplot, gridExtra)

source("auto_ml_functions.R")
source("helpers/helper_functions.R")
```

```{r}
#| label: load-data
#| include: false

energy_modelling <- read_rds("data/energy_modelling.rds")

# custom modelling (tidymodels)
custom_approach_train_results <- read_rds("output/grid_results.rds")

# auto_ml resulsts
aml_hec_all_data_models <- read_rds("models/models_all_data_2023-05-24.rds")
aml_hec_all_data_train_metrics <- read_rds("models/train_metrics_all_data_2023-05-24.rds")
aml_hec_all_data_test_metrics <- read_rds("models/test_metrics_all_data_2023-05-24.rds")
aml_hec_all_data_agg_errors <- read_rds("models/aggregated_errors_all_data_2023-05-24.rds")
```

```{r}
#| label: load-data-subsets
#| include: false

# Define the subsets and corresponding RDS file names
subsets <- c("building_class", "municipality", "construction_period", "survey_year")
file_names <- paste0("models/models_by_", subsets, "_", Sys.Date(), ".rds")

# Initialize a list to store the loaded models
loaded_models <- list()

# Iterate over the subsets and load the most recent RDS file for each subset
for (i in seq_along(subsets)) {
  subset <- subsets[i]
  file_name <- file_names[i]
  
  # Get the list of RDS files for the current subset
  model_files <- list.files("models/", pattern = paste0("models_by_", subset), full.names = TRUE)
  
  # Filter the list to exclude the files with the current date
  #model_files <- model_files[!grepl(paste0("_", Sys.Date()), model_files)]
  
  # Load the most recent RDS file for the current subset
  if (length(model_files) > 0) {
    most_recent_file <- model_files[length(model_files)]
    loaded_models[[subset]] <- readRDS(most_recent_file)
  } else {
    loaded_models[[subset]] <- NULL
  }
}

# Access the loaded models
models_by_building_class <- loaded_models$building_class
models_by_municipality <- loaded_models$municipality
models_by_construction_period <- loaded_models$construction_period

# auto ml subset survey year
file_list <- list.files("models/subset_survey_year", pattern = "results_*", full.names = TRUE)
models_by_survey_year <- lapply(file_list, readRDS)
```



## Ridgline density plots of HEPI

![HEPI density plot for SFH per municipality](figures/99-appendix-ridgline-sfh.png){#ridgeline-sfh fig-align="center" width="70%"}

![HEPI density plot for MFH per municipality](figures/99-ridgeline-mfh.png){#ridgeline-mfh fig-align="center" width="70%"}

```{r}
#| label: figure-hepi-densitiy-municipality-sfh
#| tbl-cap: "bla"
#| tbl-cap-location: bottom
#| warning: false
#| eval: false

library(extrafont)

# Import fonts to the extrafont library
font_import()

# Load the imported fonts
loadfonts()

# Specify the font for the plot
theme_set(theme(text = element_text(family = "Arial")))

# Render the plot to PDF
pdf("output_plot.pdf")
energy_modelling |>
  filter(building_class == 1110) |>
  ggplot(aes(x = hepi, y = municipality_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(scale = 5, rel_min_height = 0.02) +
  scale_fill_viridis(name = "HEPI", option = "C") +
  xlim(0, 300) +
  theme(axis.title.x = element_text("kWh/m2/year"),
        axis.title.y = element_blank())
dev.off()
```

```{r}
#| label: figure-hepi-densitiy-municipality-mfh
#| tbl-cap: "HEPI density plot for single family houses per municipality"
#| tbl-cap-location: bottom
#| warning: false
#| eval: false

energy_modelling |>
  filter(building_class != 1110) |>
  ggplot(aes(x = hepi, y = municipality_name, fill = after_stat(x))) +
  geom_density_ridges_gradient(scale = 5, rel_min_height = 0.02) +
  scale_fill_viridis(name = "HEPI", option = "C") +
  xlim(0,300) +
   theme(axis.title.x=element_text("kWh/m2/year"),
         axis.title.y=element_blank())
```



## Retrofit analysis {#sec-appendix-retrofit}

![Number of retrofitted buildings per year and retrofit type](figures/99-retrofit-types.png){#fig-retrofit-type fig-align="center" width="80%"}

```{r}
#| label: fig-retrofitting-effect-2016-2018
#| fig-cap: "Comparison of HEC before and after retrofitting (2016/2018)."

retrofit_plot <- energy_modelling |>
  filter(retrofitted == "Yes") |>
  arrange(desc(egid)) |>
  distinct(egid, survey_year, retrofit_year_completion, hec) |>
  pivot_wider(names_from = survey_year, names_prefix = "HEC ", values_from = hec) 

retrofit_plot_2016_2018 <- retrofit_plot |>
  ggplot((aes(`HEC 2018` , `HEC 2016` ))) +
           geom_point() +
  geom_abline(intercept = 0, slope = 1)

retrofit_plot_2018_2020 <- retrofit_plot |>
  ggplot((aes(`HEC 2018` , `HEC 2020` ))) +
           geom_point() +
  geom_abline(intercept = 0, slope = 1)

retrofit_plot_2016_2020 <- retrofit_plot |>
  ggplot((aes(`HEC 2016` , `HEC 2020`))) +
           geom_point() +
  geom_abline(intercept = 0, slope = 1)
  
retrofit_plot_2016_2018
```


```{r}
#| label: fig-retrofitting-effect-2018-2020
#| fig-cap: "Comparison of HEC before and after retrofitting (2018/2020)."
retrofit_plot_2018_2020
```


```{r}
#| label: fig-retrofitting-effect-2016-2020
#| fig-cap: "Comparison of HEC before and after retrofitting (2016/2020)."
retrofit_plot_2016_2020
```



# Modelling {#sec-appendix-modelling}

## Actual vs. Predicted using all data {#sec-appendix-actual-predicted-all}

```{r}

#| warning: false

# Create a list of density plots
 density_plots <- lapply(seq_along(aml_hec_all_data_models), function(i) {
   model_type <- aml_hec_all_data_models[[i]]$variable_selection
   create_density_plot(aml_hec_all_data_models, i, model_type)
 })

# actual vs predicted plot
 actual_predicted_plots <- lapply(seq_along(aml_hec_all_data_models), function(i) {
    model_type <- aml_hec_all_data_models[[i]]$variable_selection
    create_actual_predicted_plot(aml_hec_all_data_models, i, model_type)
    })

# residual plots
 residual_plots <- lapply(seq_along(aml_hec_all_data_models), function(i) {
   model_type <- aml_hec_all_data_models[[i]]$variable_selection
   create_residual_plot(aml_hec_all_data_models, i, model_type)
 })

 

do.call("grid.arrange", c(density_plots[1:2], nrow = 2))  


```

```{r}
do.call("grid.arrange", c(density_plots[3:4], nrow = 2))  
```

```{r}
#| label: fig-density-plot-all-predictors
#| fig-cap: "Actual and predicted values for models with all data."
#| fig-cap-location: bottom
do.call("grid.arrange", c(density_plots[5:6], nrow = 2))  
```

## Residual plots (all data)

```{r}

do.call("grid.arrange", c(residual_plots[1:2], nrow = 2))  

```

```{r}
do.call("grid.arrange", c(residual_plots[3:4], nrow = 2))  
```


```{r}
#| label: fig-residual-plot-all-predictors
#| fig-cap: "Residual plots for models with all data."
#| fig-cap-location: bottom
#| warning: false
#| 
do.call("grid.arrange", c(residual_plots[5:6], nrow = 2))  
```



## Actual vs. Predicted subset building class {#sec-appendix-actual-predicted-buidling-class}

```{r}


# Select the models_by_building_class list
model_list <- models_by_building_class

# Create a list of density plots
plots <- lapply(seq_along(model_list), function(i) {
  model_type <- model_list[[i]]$building_class
  create_density_plot(model_list, i, model_type, logarithmic = FALSE)
})

# Group the plots into pages with four plots each
plot_pages <- split(plots, rep(1:ceiling(length(plots)/4), each = 4, length.out = length(plots)))

# Create a list of plot pages
plot_pages_list <- lapply(plot_pages, function(page) {
  plot_grid(plotlist = page, nrow = 2, ncol = 2)
})

# Arrange and display the plot pages
do.call("grid.arrange", c(plots[1:2], nrow=2)) 

```


```{r}
#| label: fig-density-plot-building-class
#| fig-cap: "Density plots of actual and predicted values for building classes."
#| fig-cap-location: bottom
#| 
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[3:4], nrow=2)) 
```


## Actual vs. Predicted subset construction period {#sec-appendix-actual-predicted-construction-period}

```{r}
# Create a list of density plots
plots <- lapply(seq_along(models_by_construction_period), function(i) {
  model_type <- models_by_construction_period[[i]]$construction_period
  create_density_plot(models_by_construction_period, i, model_type, logarithmic = FALSE)
})


# Arrange and display the plot pages
do.call("grid.arrange", c(plots[1:2], nrow=2)) 

```

```{r}
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[3:4], nrow=2)) 
```

```{r}
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[5:6], nrow=2)) 
```

```{r}
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[7:8], nrow=2)) 
```

```{r}
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[9:10], nrow=2)) 
```

```{r}
# Arrange and display the plot pages
do.call("grid.arrange", c(plots[11:12], nrow=2)) 
```

```{r}
#| label: fig-density-plot-construction-period
#| fig-cap: "Density plots of actual and predicted values for construction periods."
#| fig-cap-location: bottom

# Arrange and display the plot pages
do.call("grid.arrange", c(plots[13:14], nrow=2)) 
```

## Actual vs. Predicted subset survey year {#sec-appendix-actual-predicted-survey-year}

```{r}
plots <- lapply(seq_along(models_by_survey_year), function(i) {
  model_type <- models_by_survey_year[[i]]$survey_year
  create_density_plot(models_by_survey_year, i, model_type, logarithmic = FALSE)
})



# Arrange and display the plot pages
do.call("grid.arrange", c(plots[1:2], nrow=2)) 
```


```{r}
#| label: fig-density-plot-survey-year
#| fig-cap: "Density plots of actual and predicted values for survey year."
#| fig-cap-location: bottom

# Arrange and display the plot pages
do.call("grid.arrange", c(plots[3:4], nrow=2)) 
```


## Comparison of variable selections {#sec-appendix-variable-selections}

```{r}
#| label: tbl-results-test-automl-different-predictors-all-models
#| tbl-cap: "Comparing variable selections: Best perfomance for each selection and algorithm."
#| tbl-cap-location: bottom
# auto_ml resulsts all data

file_list <- list.files("models/all_data/", pattern = "*.rds", full.names = TRUE)
aml_hec_all_data_models <- lapply(file_list, readRDS)

aml_hec_test_metrics_all_data <- bind_rows(
  lapply(aml_hec_all_data_models, function(model) {
    test_metrics <- model$test_metrics
    variable_selection <- model$variable_selection
    
    n_test <- nrow(model$test_preds)  # Count rows where Model matches the extracted model name
    total_obs <- n_test * 4  # Assuming the 75-25 train-test split ratio
    n_train <- round(total_obs * 0.75)
    
    test_metrics %>%
      mutate(`Variable Selection` = variable_selection,
             `ntrain/ntest` = paste0(n_train, "/", n_test))
  })
)



tbl_aml_test_diff_predictors <- aml_hec_test_metrics_all_data %>%
  rename(Algorithm = Algorithm...2,
         R2 = R_squared) |>
  group_by(Variable_Selection, Algorithm) |>
  arrange(RMSE) %>%
  slice_head(n = 1) %>%
  ungroup() |>
  select(`Variable Selection`, Algorithm, R2, RMSE, MAE, MAPE, CV, `ntrain/ntest`) |>
  mutate_if(is.numeric, round, 2) |>
  mutate(Algorithm = case_when(
    Algorithm == "stackedensemble" ~ "Stacked Ensemble",
    Algorithm == "xgboost" ~ "XGB",
    Algorithm == "gbm" ~ "GBM",
    Algorithm == "drf" ~ "DRF",
    Algorithm == "deeplearning" ~ "Deep Learning",
    Algorithm == "Based on HEPI" ~ "Current Approach",
    Algorithm == "glm" ~ "GLM",
    TRUE ~ Algorithm),
    `Variable Selection` = case_when(
    `Variable Selection` == "predictors_basic" ~ "Only basic predictors",
    `Variable Selection` == "predictors_hec_all" ~ "All predictors",
    `Variable Selection` == "predictors_hec_without_retrofit" ~ "Without retrofit variable",
    `Variable Selection` == "predictors_hec_without_standalone" ~ "Without stand alone variable",
    `Variable Selection` == "predictors_without_social" ~ "Without social indicators",
    TRUE ~ `Variable Selection`)
    ) |>
  arrange(RMSE)|> 
  as.data.frame()

# Generate the table using knitr::kable
tbl_aml_test_diff_predictors_kable <- tbl_aml_test_diff_predictors %>%
  knitr::kable(booktabs = TRUE)
  

tbl_aml_test_diff_predictors_kable
```
