## Auto ML with H2O

### R

```{r}
library(h2o)
library(tidymodels)
library(tidyverse)
```


```{r}

h2o.init()

# prepare data
energy_modelling <- read_rds("data/energy_modelling.rds")


# split
# data split
energy_split <- initial_split(energy_modelling, 
                              prop = 0.8, 
                              strata = hec)


energy_train <- training(energy_split) |>
  as.h2o()

energy_test  <-  testing(energy_split) |>
  as.h2o()

dim(energy_train)
```

```{r}
# predictor variables
predictors <- c('survey_year', 'num_residents', 'num_floors', 'building_area_m2', 'gross_floor_area_m2', 'heated_area_m2', 'year_of_installation', 'efficiency_of_installation', 'energy_usage_of_installation', 'solar_system', 'solar_system_usage', 'solar_system_area_m2', 'photovoltaic_system', 'photovoltaic_system_power_kw', 'municipality_code', 'building_class', 'construction_year', 'coordinate_e', 'coordinate_n', 'num_dwellings', 'meters_above_sealevel', 'energy_production_solar_mwh', 'energy_consumed_hot_water_mwh', 'retrofitted', 'stand_alone', 'hdd')

# define target and predictors
y <- "hec"
x <- predictors

```


#### Run Auto ML
```{r}
aml <- h2o.automl(x = x, y = y, training_frame = energy_train, max_models = 10, seed = 1)
```

```{r}
lb <- aml@leaderboard
print(lb, n = nrow(lb))
```

#### Save best model
```{r}
# this is equivalent to
best_model <- h2o.get_best_model(aml)

# Get the best XGBoost model using default sort metric
xgb <- h2o.get_best_model(aml, algorithm = "xgboost")

h2o.saveModel(best_model, paste0("models/best_model_",Sys.Date()))
h2o.saveModel(xgb, paste0("models/best_model_xgb",Sys.Date()))
```

